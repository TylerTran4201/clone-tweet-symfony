<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\User' . "\0" . 'id', '' . "\0" . 'App\\Entity\\User' . "\0" . 'email', '' . "\0" . 'App\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\User' . "\0" . 'password', '' . "\0" . 'App\\Entity\\User' . "\0" . 'userProfile', '' . "\0" . 'App\\Entity\\User' . "\0" . 'liked', '' . "\0" . 'App\\Entity\\User' . "\0" . 'posts', '' . "\0" . 'App\\Entity\\User' . "\0" . 'comments', '' . "\0" . 'App\\Entity\\User' . "\0" . 'isVerified', '' . "\0" . 'App\\Entity\\User' . "\0" . 'bannedUntil', '' . "\0" . 'App\\Entity\\User' . "\0" . 'follows', '' . "\0" . 'App\\Entity\\User' . "\0" . 'followers', '' . "\0" . 'App\\Entity\\User' . "\0" . 'isAdmin', '' . "\0" . 'App\\Entity\\User' . "\0" . 'theme'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\User' . "\0" . 'id', '' . "\0" . 'App\\Entity\\User' . "\0" . 'email', '' . "\0" . 'App\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\User' . "\0" . 'password', '' . "\0" . 'App\\Entity\\User' . "\0" . 'userProfile', '' . "\0" . 'App\\Entity\\User' . "\0" . 'liked', '' . "\0" . 'App\\Entity\\User' . "\0" . 'posts', '' . "\0" . 'App\\Entity\\User' . "\0" . 'comments', '' . "\0" . 'App\\Entity\\User' . "\0" . 'isVerified', '' . "\0" . 'App\\Entity\\User' . "\0" . 'bannedUntil', '' . "\0" . 'App\\Entity\\User' . "\0" . 'follows', '' . "\0" . 'App\\Entity\\User' . "\0" . 'followers', '' . "\0" . 'App\\Entity\\User' . "\0" . 'isAdmin', '' . "\0" . 'App\\Entity\\User' . "\0" . 'theme'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $email): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserIdentifier(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserIdentifier', []);

        return parent::getUserIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(array $roles): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword(string $password): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserProfile(): ?\App\Entity\UserProfile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserProfile', []);

        return parent::getUserProfile();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserProfile(\App\Entity\UserProfile $userProfile): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserProfile', [$userProfile]);

        return parent::setUserProfile($userProfile);
    }

    /**
     * {@inheritDoc}
     */
    public function getLiked(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLiked', []);

        return parent::getLiked();
    }

    /**
     * {@inheritDoc}
     */
    public function addLiked(\App\Entity\MicroPost $liked): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLiked', [$liked]);

        return parent::addLiked($liked);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLiked(\App\Entity\MicroPost $liked): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLiked', [$liked]);

        return parent::removeLiked($liked);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosts(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosts', []);

        return parent::getPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function addPost(\App\Entity\MicroPost $post): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPost', [$post]);

        return parent::addPost($post);
    }

    /**
     * {@inheritDoc}
     */
    public function removePost(\App\Entity\MicroPost $post): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePost', [$post]);

        return parent::removePost($post);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\App\Entity\Comment $comment): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', [$comment]);

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\App\Entity\Comment $comment): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', [$comment]);

        return parent::removeComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function isVerified(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVerified', []);

        return parent::isVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsVerified(bool $isVerified): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsVerified', [$isVerified]);

        return parent::setIsVerified($isVerified);
    }

    /**
     * {@inheritDoc}
     */
    public function getBannedUntil(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBannedUntil', []);

        return parent::getBannedUntil();
    }

    /**
     * {@inheritDoc}
     */
    public function setBannedUntil(?\DateTimeInterface $bannedUntil): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBannedUntil', [$bannedUntil]);

        return parent::setBannedUntil($bannedUntil);
    }

    /**
     * {@inheritDoc}
     */
    public function isBanned()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBanned', []);

        return parent::isBanned();
    }

    /**
     * {@inheritDoc}
     */
    public function getFollows(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFollows', []);

        return parent::getFollows();
    }

    /**
     * {@inheritDoc}
     */
    public function follow(\App\Entity\User $follow): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'follow', [$follow]);

        return parent::follow($follow);
    }

    /**
     * {@inheritDoc}
     */
    public function unfollow(\App\Entity\User $follow): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unfollow', [$follow]);

        return parent::unfollow($follow);
    }

    /**
     * {@inheritDoc}
     */
    public function getFollowers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFollowers', []);

        return parent::getFollowers();
    }

    /**
     * {@inheritDoc}
     */
    public function addFollower(\App\Entity\User $follower): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFollower', [$follower]);

        return parent::addFollower($follower);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFollower(\App\Entity\User $follower): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFollower', [$follower]);

        return parent::removeFollower($follower);
    }

    /**
     * {@inheritDoc}
     */
    public function isIsAdmin(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isIsAdmin', []);

        return parent::isIsAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsAdmin(bool $isAdmin): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsAdmin', [$isAdmin]);

        return parent::setIsAdmin($isAdmin);
    }

    /**
     * {@inheritDoc}
     */
    public function getTheme(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTheme', []);

        return parent::getTheme();
    }

    /**
     * {@inheritDoc}
     */
    public function setTheme(string $theme): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTheme', [$theme]);

        return parent::setTheme($theme);
    }

}
